# -------------------- imports --------------------
import psycopg2                         # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
import csv                              # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CSV-—Ñ–∞–π–ª–∞–º–∏
from psycopg2.extensions import register_adapter

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è list, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã PostgreSQL
register_adapter(list, psycopg2._psycopg.AsIs)

# -------------------- DB connect -----------------
def connect():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö phonebook
        conn = psycopg2.connect(
            dbname="phonebook",
            user="postgres",
            password="2006",
            host="localhost",
            port="5432"
        )
        return conn, conn.cursor()     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫—É—Ä—Å–æ—Ä
    except Exception as e:
        print("Database connection error:", e)
        exit()

# -------------------- CRUD wrappers --------------
def insert_from_console(cur, conn):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
    name  = input("Enter name: ")
    phone = input("Enter phone number: ")
    cur.execute("CALL insert_or_update_user(%s, %s)", (name, phone))
    conn.commit()
    print("Done: inserted or updated.")

def insert_from_csv(cur, conn, filename):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV —Ñ–∞–π–ª–∞
    try:
        names, phones = [], []
        with open(filename, newline='', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader, None)        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for name, phone in reader:
                names.append(name)
                phones.append(phone)

        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤—Å—Ç–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("CALL bulk_insert_users(%s::text[], %s::text[], NULL)", (names, phones))
        bad = cur.fetchone()[0]       # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        conn.commit()

        if bad:
            print("‚ùó Incorrect rows skipped:")
            for row in bad:
                print("  ", row)
        else:
            print("CSV loaded successfully.")
    except FileNotFoundError:
        print("The file was not found.")
    except Exception as e:
        print("Error when working with CSV:", str(e))

def update_user(cur, conn, name, new_name=None, new_phone=None):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏/–∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if new_name:
        cur.execute("UPDATE phonebook SET username=%s WHERE username=%s", (new_name, name))
    if new_phone:
        cur.execute("UPDATE phonebook SET phone=%s WHERE username=%s", (new_phone, name))
    conn.commit()
    print("The record has been updated.")

def search_user(cur, value):
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    cur.execute("SELECT * FROM phonebook WHERE username=%s OR phone=%s", (value, value))
    for row in cur.fetchall():
        print(row) if row else print("No records were found.")

def delete_user(cur, conn, value):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    cur.execute("CALL delete_user_by_value(%s)", (value,))
    conn.commit()
    print("Deleted (if existed).")

def show_all(cur):
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ phonebook
    cur.execute("SELECT * FROM phonebook")
    rows = cur.fetchall()
    print("\nüìã All entries:") if rows else print("The table is empty.")
    for r in rows:
        print(r)

def search_by_pattern(cur):
    # –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    pattern = input("Enter a search pattern (e.g. 'John'): ")
    cur.execute("SELECT * FROM search_by_pattern(%s)", (pattern,))
    rows = cur.fetchall()
    for r in rows:
        print(r) if rows else print("No matches found.")

def show_page(cur):
    # –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ –∑–∞–ø–∏—Å–µ–π (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    limit  = int(input("Limit: "))
    offset = int(input("Offset: "))
    cur.execute("SELECT * FROM get_page(%s,%s)", (limit, offset))
    rows = cur.fetchall()
    for r in rows:
        print(r) if rows else print("No rows on this page.")

# -------------------- main menu ------------------
def main():
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã
    conn, cur = connect()
    try:
        while True:
            print("\n--- PhoneBook ---")
            print("1. Add an entry (manually)")
            print("2. Add from CSV")
            print("3. Update the record")
            print("4. Find an entry")
            print("5. Delete the entry")
            print("6. Show the entire table")
            print("7. Search by pattern")
            print("8. Show page (pagination)")
            print("0. Exit")

            choice = input("Select an action: ")

            if choice == "1":
                insert_from_console(cur, conn)
            elif choice == "2":
                file = input("CSV file name: ")
                insert_from_csv(cur, conn, file)
            elif choice == "3":
                name = input("Enter a name for the update: ")
                new_name  = input("New name (Enter to skip): ") or None
                new_phone = input("New phone (Enter to skip): ") or None
                update_user(cur, conn, name, new_name, new_phone)
            elif choice == "4":
                val = input("Name or phone to search: ")
                search_user(cur, val)
            elif choice == "5":
                val = input("Name or phone to delete: ")
                delete_user(cur, conn, val)
            elif choice == "6":
                show_all(cur)
            elif choice == "7":
                search_by_pattern(cur)
            elif choice == "8":
                show_page(cur)
            elif choice == "0":
                print("Good‚Äëbye!")
                break
            else:
                print("Wrong choice. Try again.")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cur.close()
        conn.close()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    main()
